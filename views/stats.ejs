<section class="bg-white dark:bg-grv-surface rounded-2xl p-4 shadow-sm dark:shadow-none border border-slate-200 dark:border-grv-border">
  <h1 class="text-xl font-semibold mb-2">Character Stats</h1>
  <form method="GET" class="flex flex-wrap gap-2 mb-4">
    <label class="text-sm">Analyze
      <select name="analyze" class="px-2 py-1 border rounded-xl ml-2">
        <option value="level" <%= analyze==='level'?'selected':'' %>>Level</option>
        <option value="class" <%= analyze==='class'?'selected':'' %>>Class</option>
      </select>
    </label>
    <label class="text-sm">Grouping
      <select name="grouping" class="px-2 py-1 border rounded-xl ml-2">
        <option value="single" <%= grouping==='single'?'selected':'' %>>Single</option>
        <option value="grouped" <%= grouping==='grouped'?'selected':'' %>>Grouped (3-level)</option>
      </select>
    </label>
    <button class="px-3 py-2 bg-slate-900 text-white dark:bg-grv-accent dark:text-grv-bg rounded-xl">Update</button>
  </form>

  <!-- Fixed-height container; canvas fills it -->
  <div class="w-full h-80 md:h-96">
    <canvas id="chart" class="w-full h-full"></canvas>
  </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const labels = <%- labels %>;
  const data = <%- counts %>;
  const analyze = "<%= analyze %>";

  function isDark(){ return document.documentElement.classList.contains('dark'); }
  function chartTheme(){
    return isDark()
      ? { text: '#ebdbb2', grid: 'rgba(235,219,178,0.18)', bar: '#fe8019' } // Gruvbox
      : { text: '#334155', grid: 'rgba(0,0,0,0.08)',       bar: '#4f46e5' };
  }

  const ctx = document.getElementById('chart');
  let chart = null;

  function buildChart() {
    const c = chartTheme();
    if (chart) { chart.destroy(); }
    chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels,
        datasets: [{
          label: 'Characters',
          data,
          backgroundColor: c.bar,
          borderColor: c.bar,      // keep consistent border
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: {
            mode: 'index',
            intersect: false,
            titleColor: c.text,
            bodyColor:  c.text
          }
        },
        scales: {
          x: {
            ticks: {
              autoSkip: analyze === 'class' ? false : true,
              maxRotation: analyze === 'class' ? 35 : 0,
              color: c.text
            },
            grid: { display: false }
          },
          y: {
            beginAtZero: true,
            ticks: { precision: 0, color: c.text },
            grid: { color: c.grid }
          }
        }
      }
    });
  }

  // Build once
  buildChart();

  // Rebuild when theme flips (watch <html class="...">)
  const mo = new MutationObserver(muts => {
    if (muts.some(m => m.type === 'attributes' && m.attributeName === 'class')) {
      buildChart();
    }
  });
  mo.observe(document.documentElement, { attributes: true });

  // Optional: if your toggle dispatches a custom event
  window.addEventListener('themechange', buildChart);
</script>
